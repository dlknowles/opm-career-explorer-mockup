/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst questions_v3_json_1 = __importDefault(__webpack_require__(/*! ./data/questions-v3.json */ \"./src/data/questions-v3.json\"));\nconst sample_series_json_1 = __importDefault(__webpack_require__(/*! ./data/sample-series.json */ \"./src/data/sample-series.json\"));\nconst path = window.location.pathname;\nconst pathSegments = path.split('/');\nconst fileName = pathSegments[pathSegments.length - 1];\n(_a = document.getElementById('menuToggle')) === null || _a === void 0 ? void 0 : _a.addEventListener('click', function () {\n    var _a;\n    (_a = document.querySelector('.mockup-nav')) === null || _a === void 0 ? void 0 : _a.classList.toggle('hidden');\n});\nif (fileName === 'intro.html') {\n    const div1 = document.getElementById('div1');\n    const div2 = document.getElementById('div2');\n    const div3 = document.getElementById('div3');\n    document.getElementById('showDiv1').addEventListener('click', function () {\n        hideAllDivs();\n        div1.style.display = 'block';\n    });\n    document.getElementById('showDiv2').addEventListener('click', function () {\n        hideAllDivs();\n        div2.style.display = 'block';\n    });\n    document.getElementById('showDiv3').addEventListener('click', function () {\n        hideAllDivs();\n        div3.style.display = 'block';\n    });\n    function hideAllDivs() {\n        div1.style.display = 'none';\n        div2.style.display = 'none';\n        div3.style.display = 'none';\n    }\n}\nif (fileName === 'results.html') {\n    const urlField = document.querySelector('#urlField');\n    const currentURL = window.location.href;\n    if (urlField && currentURL) {\n        urlField.value = currentURL;\n    }\n    const copyButton = document.querySelector('#copyButton');\n    if (copyButton && currentURL) {\n        copyButton.addEventListener('click', (event) => {\n            event.preventDefault();\n            navigator.clipboard\n                .writeText(currentURL)\n                .then(() => alert('URL copied to clipboard!'))\n                .catch((err) => console.error('Error copying text: ', err));\n        });\n    }\n    const matchRanges = [\n        { min: 0, max: 79, color: 'red', copy: 'weak' },\n        { min: 80, max: 89, color: 'orange', copy: 'moderate' },\n        { min: 90, max: 95, color: 'lt-green', copy: 'strong' },\n        { min: 96, max: 100, color: 'green', copy: 'very strong' }\n    ];\n    const renderSeries = (data) => {\n        const seriesArr = data['Series'];\n        seriesArr.sort((a, b) => {\n            if (a.Match < b.Match) {\n                return 1;\n            }\n            if (a.Match > b.Match) {\n                return -1;\n            }\n            return 0;\n        });\n        console.log(seriesArr);\n        const topSeriesList = document.querySelector('#top-series-list');\n        if (topSeriesList) {\n            const top10 = seriesArr.slice(0, 10);\n            top10.forEach((series, i) => {\n                let html = `\n                    <li>\n                        <a href=\"#series-${i}\" class=\"series-name\" data-series-index=\"${i}\">${series.CodeName}</a>\n                    </li>\n                    `;\n                topSeriesList.innerHTML += html;\n            });\n            topSeriesList.addEventListener('click', function (event) {\n                const targetElement = event.target;\n                if (targetElement && targetElement.classList.contains('series-name')) {\n                    event.preventDefault();\n                    const seriesIndex = targetElement.getAttribute('data-series-index');\n                    const scrollTargetElement = document.getElementById(`series-${seriesIndex}`);\n                    if (scrollTargetElement) {\n                        scrollTargetElement.scrollIntoView({ behavior: 'smooth' });\n                    }\n                }\n            });\n        }\n        const seriesContainer = document.querySelector('#data');\n        if (seriesContainer) {\n            let currentIndex = 0;\n            const displaySeries = () => {\n                for (let i = currentIndex; i < currentIndex + 10 && i < seriesArr.length; i++) {\n                    const series = seriesArr[i];\n                    // Get the match number for the series\n                    let match = series.Match;\n                    // Find the color range that match falls into\n                    let matchRange = matchRanges.find((range) => match >= range.min && match <= range.max);\n                    // Get the color class from the color range, or a default class if no range is found\n                    let matchColor = matchRange ? matchRange.color : '';\n                    let matchCopy = matchRange ? matchRange.copy : '';\n                    let html = `\n                        <div class=\"result\" id=\"series-${i}\">\n                            <div class=\"grid-container\">\n                                <div class=\"series\">\n                                    <div class=\"series-detail\">\n                                        <h2><span class=\"series-name\">${series.CodeName}</span></h2>\n                                        <p class=\"match bg-blue\">Based on your answers, your interests are a <strong class=\"match-color-${matchColor}\">${matchCopy} match</strong> with this job series.</p>\n                                        <p>${series.Description}</p>\n                                        <div class=\"job-titles\">\n                                            <h3 class=\"text-xl\">Popular job titles</h3>\n                                            <ul class=\"usa-list\">\n                                            ${series.JobTitles.map((job, i) => `<li>${job}</li>`).join('')}\n                                            </ul>\n                                        </div>\n                                    </div>\n                                    <div class=\"series-actions\">\n                                        <div class=\"usa-button-group buttons-right\">\n                                            <a href=\"https://www.usajobs.gov/Search/Results?j=${series.Code}\" class=\"usa-button icon\"><svg class=\"usa-icon\" aria-hidden=\"true\" focusable=\"false\" role=\"img\">\n                                            <use xlink:href=\"assets/uswds/img/sprite.svg#search\"></use>\n                                        </svg> Search for jobs in this series</a>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        `;\n                    seriesContainer.innerHTML += html;\n                }\n                currentIndex += 10;\n            };\n            displaySeries();\n            const loadMoreButton = document.querySelector('#load-more');\n            if (loadMoreButton) {\n                loadMoreButton.addEventListener('click', () => {\n                    //console.log(currentIndex);\n                    displaySeries();\n                    if (currentIndex >= seriesArr.length) {\n                        loadMoreButton.remove();\n                    }\n                });\n            }\n        }\n    };\n    renderSeries(sample_series_json_1.default);\n    document.addEventListener('DOMContentLoaded', function () {\n        const faqsSection = document.querySelector('.results-faqs-section');\n        const accordion = document.querySelector('.faq-accordion');\n        const full = document.querySelector('.faq-full');\n        // Assuming you have a known previous sibling, adjust the selector accordingly.\n        const prevSibling = faqsSection.previousElementSibling;\n        if (prevSibling) {\n            let observer = new IntersectionObserver((entries) => {\n                entries.forEach(entry => {\n                    if (!entry.isIntersecting) {\n                        // Show the accordion when the previous sibling is out of view.\n                        accordion.style.display = 'block';\n                        full.style.display = 'none';\n                    }\n                    else {\n                        // Hide the accordion when the previous sibling is in view.\n                        accordion.style.display = 'none';\n                        full.style.display = 'block';\n                    }\n                });\n            }, {\n                root: null,\n                threshold: 0.1, // Adjust threshold based on when you want the toggle to happen\n            });\n            observer.observe(prevSibling);\n        }\n    });\n}\nif (fileName === 'quiz.html') {\n    const renderQuestionsV3 = (data) => {\n        const questionsArr = data['questions'];\n        console.log(questionsArr);\n        const totalQuestions = questionsArr.length;\n        const addRadioButtons = (n, fieldsetId) => {\n            const labels = ['Not interested', 'Slightly interested', 'Moderately interested', 'Very interested', 'Extremely interested'];\n            const fieldset = document.querySelector('#' + fieldsetId);\n            for (let i = 1; i <= n; i++) {\n                let html = `\n                    <div class=\"selection\" tabindex=\"0\">\n                        ${labels[i - 1]}\n                    </div>\n                    `;\n                if (fieldset) {\n                    fieldset.innerHTML += html;\n                }\n            }\n        };\n        const progressBar = document.querySelector('#progress-bar');\n        const questionsContainer = document.querySelector('#quiz-container');\n        if (questionsContainer) {\n            questionsArr.forEach((question, i) => {\n                let fieldsetId = `rating${i}`;\n                let html = `\n                        <div class=\"question text-xl\" data-question=\"${i + 1}\" tabindex=\"0\">\n                            <div class=\"question-content\">\n                                <h2 class=\"text-xl\">\n                                    <div class=\"question-number\"><span class=\"sr-only\">Question</span>${i + 1}</div><div class=\"question-text\"><span class=\"question-number\"><span class=\"sr-only\">Question</span>${i + 1}. </span>How interested are you in doing these activities at work?</div>\n                                </h2>\n                                <p>${question.question}</p>\n                                <div class=\"selections\" id=\"${fieldsetId}\"></div>\n                            </div>\n                        </div>\n                        `;\n                questionsContainer.innerHTML += html;\n                addRadioButtons(5, fieldsetId);\n            });\n            let completeScreen = `\n                    <div class=\"question question-submit text-xl\" data-question=\"${totalQuestions + 1}\" tabindex=\"0\">\n                        <div class=\"question-content submit-quiz\">\n                            <div>\n                                <h2 class=\"text-2xl\">Great! You've answered all the questions.</h2>\n                                <a href=\"results.html\" class=\"usa-button text-xl\" id=\"submit\">See your results</a>\n                            </div>\n                        </div>\n                    </div>\n                `;\n            questionsContainer.innerHTML += completeScreen;\n            let currentQuestion = 0;\n            const handleSelection = (target) => {\n                var _a;\n                (_a = target.closest('.selections')) === null || _a === void 0 ? void 0 : _a.querySelectorAll('.selection').forEach((selection) => {\n                    selection.classList.remove('selected');\n                });\n                target.classList.add('selected');\n                console.log(\"selected\");\n                const currentElement = target.closest('.question');\n                const currentQuestionNumber = Number(currentElement.dataset.question);\n                if (currentQuestionNumber === currentQuestion) {\n                    currentQuestion++;\n                    navigateToQuestion(currentQuestion);\n                    updateProgress();\n                }\n            };\n            const navigateToQuestion = (questionNumber) => {\n                const targetElement = questionsContainer.querySelector(`.question[data-question=\"${questionNumber}\"]`);\n                console.log(targetElement);\n                if (targetElement) {\n                    targetElement.style.display = 'flex';\n                    setTimeout(() => {\n                        targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });\n                        setTimeout(() => {\n                            targetElement.focus();\n                        }, 500);\n                        if (questionNumber === 1) {\n                            setTimeout(() => {\n                                document.querySelector('.bar-bottom').style.display = 'block';\n                            }, 300);\n                        }\n                    }, 300);\n                }\n            };\n            const updateProgress = () => {\n                // Update progress bar\n                const progressPercentage = ((currentQuestion - 1) / questionsArr.length) * 100;\n                progressBar.style.width = progressPercentage + '%';\n                // Update progress text\n                const progressTextElement = document.querySelector('#progress-text');\n                if (progressTextElement) {\n                    progressTextElement.innerHTML = `<span class=\"pt-complete\">${Math.floor(progressPercentage)}% Complete</span><span class=\"pt-answered\">${currentQuestion - 1}/${totalQuestions} questions answered</span>`;\n                    // progressTextElement.textContent = `${Math.floor(progressPercentage)}% Complete | ${currentQuestion - 1}/25 Answered`;\n                }\n            };\n            questionsContainer.addEventListener('click', function (event) {\n                const target = event.target;\n                if (target.classList.contains('selection')) {\n                    event.preventDefault();\n                    handleSelection(target);\n                }\n            });\n            questionsContainer.addEventListener('keydown', function (event) {\n                if (event.key === 'Enter' || event.key === ' ') {\n                    const target = event.target;\n                    if (target.classList.contains('selection')) {\n                        event.preventDefault();\n                        handleSelection(target);\n                    }\n                }\n            });\n            // Auto answer questions\n            const autoAnswerButton = document.querySelector('#autoAnswer');\n            if (autoAnswerButton) {\n                autoAnswerButton.addEventListener('click', function () {\n                    for (let i = 0; i <= (totalQuestions); i++) {\n                        const questionElement = questionsContainer.querySelector(`.question[data-question=\"${i}\"]`);\n                        if (questionElement) {\n                            const selections = questionElement.querySelectorAll('.selection');\n                            const targetSelection = selections[0]; // Select the first option for simplicity\n                            if (targetSelection) {\n                                handleSelection(targetSelection);\n                            }\n                        }\n                    }\n                });\n            }\n            const submitButton = document.querySelector('#submit');\n            const loadingContainer = document.querySelector('.loading-container');\n            const animation = document.querySelector('.loading-container > div');\n            submitButton.addEventListener('click', function (e) {\n                e.preventDefault();\n                const destination = this.href;\n                loadingContainer.style.display = 'flex';\n                setTimeout(() => {\n                    animation.style.opacity = '0';\n                }, 3500);\n                // After 4 seconds, start the fade-out effect\n                setTimeout(() => {\n                    loadingContainer.style.opacity = '0';\n                    window.location.href = destination;\n                }, 4000);\n            });\n        }\n        // const staticQuestionsData = './data/questions-v3.json';\n        // fetchQuestionsV3(staticQuestionsData);\n        // async function fetchQuestionsV3(staticQuestionsData: any) {\n        //     try {\n        //         const res = await fetch(staticQuestionsData);\n        //         const data = await res.json();\n        //         const questionsArr = data['questions'];\n        //         const totalQuestions = questionsArr.length;\n        //         const addRadioButtons = (n: number, fieldsetId: string) => {\n        //             const labels = ['Not interested', 'Slightly interested', 'Moderately interested', 'Very interested', 'Extremely interested'];\n        //             const fieldset = document.querySelector('#' + fieldsetId);\n        //             for (let i = 1; i <= n; i++) {\n        //                 let html = `\n        //                 <div class=\"selection\" tabindex=\"0\">\n        //                     ${labels[i - 1]}\n        //                 </div>\n        //                 `;\n        //                 if (fieldset) {\n        //                     fieldset.innerHTML += html;\n        //                 }\n        //             }\n        //         };\n        //         const progressBar = document.querySelector('#progress-bar') as HTMLElement;\n        //         const questionsContainer = document.querySelector('#quiz-container') as HTMLElement;\n        //         if (questionsContainer) {\n        //             questionsArr.forEach((question: any, i: number) => {\n        //                 let fieldsetId = `rating${i}`;\n        //                 let html = `\n        //                     <div class=\"question text-xl\" data-question=\"${i + 1}\" tabindex=\"0\">\n        //                         <div class=\"question-content\">\n        //                             <h2 class=\"text-xl\">\n        //                                 <div class=\"question-number\"><span class=\"sr-only\">Question</span>${i + 1}</div><div class=\"question-text\"><span class=\"question-number\"><span class=\"sr-only\">Question</span>${i + 1}. </span>How interested are you in doing these activities at work?</div>\n        //                             </h2>\n        //                             <p>${question.question}</p>\n        //                             <div class=\"selections\" id=\"${fieldsetId}\"></div>\n        //                         </div>\n        //                     </div>\n        //                     `;\n        //                 questionsContainer.innerHTML += html;\n        //                 addRadioButtons(5, fieldsetId);\n        //             });\n        //             let completeScreen = `\n        //                 <div class=\"question question-submit text-xl\" data-question=\"${totalQuestions + 1}\" tabindex=\"0\">\n        //                     <div class=\"question-content submit-quiz\">\n        //                         <div>\n        //                             <h2 class=\"text-2xl\">Great! You've answered all the questions.</h2>\n        //                             <a href=\"results.html\" class=\"usa-button text-xl\" id=\"submit\">See your results</a>\n        //                         </div>\n        //                     </div>\n        //                 </div>\n        //             `;\n        //             questionsContainer.innerHTML += completeScreen;\n        //             let currentQuestion = 0;\n        //             const handleSelection = (target: HTMLElement) => {\n        //                 target.closest('.selections')?.querySelectorAll('.selection').forEach((selection) => {\n        //                     selection.classList.remove('selected');\n        //                 });\n        //                 target.classList.add('selected');\n        //                 console.log(\"selected\");\n        //                 const currentElement = target.closest('.question') as HTMLElement;\n        //                 const currentQuestionNumber = Number(currentElement.dataset.question);\n        //                 if (currentQuestionNumber === currentQuestion) {\n        //                     currentQuestion++;\n        //                     navigateToQuestion(currentQuestion);\n        //                     updateProgress();\n        //                 }\n        //             };\n        //             const navigateToQuestion = (questionNumber: number) => {\n        //                 const targetElement = questionsContainer.querySelector(`.question[data-question=\"${questionNumber}\"]`) as HTMLElement;\n        //                 console.log(targetElement);\n        //                 if (targetElement) {\n        //                     targetElement.style.display = 'flex';\n        //                     setTimeout(() => {\n        //                         targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });\n        //                         setTimeout(() => {\n        //                             targetElement.focus();\n        //                         }, 500);\n        //                         if (questionNumber === 1) {\n        //                             setTimeout(() => {\n        //                                 (document.querySelector('.bar-bottom') as HTMLElement).style.display = 'block';\n        //                             }, 300);\n        //                         }\n        //                     }, 300);\n        //                 }\n        //             };\n        //             const updateProgress = () => {\n        //                 // Update progress bar\n        //                 const progressPercentage = ((currentQuestion - 1) / questionsArr.length) * 100;\n        //                 progressBar.style.width = progressPercentage + '%';\n        //                 // Update progress text\n        //                 const progressTextElement = document.querySelector('#progress-text');\n        //                 if (progressTextElement) {\n        //                     progressTextElement.innerHTML = `<span class=\"pt-complete\">${Math.floor(\n        //                         progressPercentage\n        //                     )}% Complete</span><span class=\"pt-answered\">${currentQuestion - 1}/${totalQuestions} questions answered</span>`;\n        //                     // progressTextElement.textContent = `${Math.floor(progressPercentage)}% Complete | ${currentQuestion - 1}/25 Answered`;\n        //                 }\n        //             };\n        //             questionsContainer.addEventListener('click', function (event) {\n        //                 const target = event.target as HTMLElement;\n        //                 if (target.classList.contains('selection')) {\n        //                     event.preventDefault();\n        //                     handleSelection(target);\n        //                 }\n        //             });\n        //             questionsContainer.addEventListener('keydown', function (event) {\n        //                 if (event.key === 'Enter' || event.key === ' ') {\n        //                     const target = event.target as HTMLElement;\n        //                     if (target.classList.contains('selection')) {\n        //                         event.preventDefault();\n        //                         handleSelection(target);\n        //                     }\n        //                 }\n        //             });\n        //             // Auto answer questions\n        //             const autoAnswerButton = document.querySelector('#autoAnswer');\n        //             if (autoAnswerButton) {\n        //                 autoAnswerButton.addEventListener('click', function () {\n        //                     for (let i = 0; i <= (totalQuestions); i++) {\n        //                         const questionElement = questionsContainer.querySelector(`.question[data-question=\"${i}\"]`) as HTMLElement;\n        //                         if (questionElement) {\n        //                             const selections = questionElement.querySelectorAll('.selection');\n        //                             const targetSelection = selections[0]; // Select the first option for simplicity\n        //                             if (targetSelection) {\n        //                                 handleSelection(targetSelection as HTMLElement);\n        //                             }\n        //                         }\n        //                     }\n        //                 });\n        //             }\n        //             const submitButton = document.querySelector('#submit') as HTMLLinkElement;\n        //             const loadingContainer = document.querySelector('.loading-container') as HTMLElement;\n        //             const animation = document.querySelector('.loading-container > div') as HTMLElement;\n        //             submitButton.addEventListener('click', function (e) {\n        //                 e.preventDefault();\n        //                 const destination = this.href;\n        //                 loadingContainer.style.display = 'flex';\n        //                 setTimeout(() => {\n        //                     animation.style.opacity = '0';\n        //                 }, 3500);\n        //                 // After 4 seconds, start the fade-out effect\n        //                 setTimeout(() => {\n        //                     loadingContainer.style.opacity = '0';\n        //                     window.location.href = destination;\n        //                 }, 4000);\n        //             });\n        //         }\n        //     } catch (error) {\n        //         console.error('Error:', error);\n        //     }\n    };\n    renderQuestionsV3(questions_v3_json_1.default);\n}\n\n\n//# sourceURL=webpack://opm-career-explorer-mockup/./src/index.ts?");

/***/ }),

/***/ "./src/data/questions-v3.json":
/*!************************************!*\
  !*** ./src/data/questions-v3.json ***!
  \************************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('{\"questions\":[{\"question\":\"Operate machines to cut, shape and fit metal, glass or concrete parts. Use tools to create finished products or structures.\"},{\"question\":\"Fix electronics, machines and work equipment using hand and power tools. Replace parts, make repairs and perform tests to check the results.\"},{\"question\":\"Study plant and animal growth in settings such as farms, forests, zoos or shelters. Tend to crops or animals and learn what affects their growth or survival. \"},{\"question\":\"Provide health care and treatment to patients with various conditions and needs. Perform medical procedures and track patient progress. \"},{\"question\":\"Transport cargo and passengers by land, sea or air using trucks, trains, planes or boats. Load materials and follow routes and directions. \"},{\"question\":\"Create, configure and test computer software and hardware. Write programs, conduct analyses and meet design standards. \"},{\"question\":\"Provide recreation and social services in parks, health centers or community centers. Teach classes, organize group activities and help people with their needs.\"},{\"question\":\"Create products from fabrics and raw materials that meet quality and safety standards. Write and apply product requirements.\"},{\"question\":\"Investigate and solve legal claims or disputes related to civil or criminal law. Interview witnesses, review evidence and appear in court.\"},{\"question\":\"Design and construct buildings and spaces to meet safety and efficiency goals. Make sure that interior and exterior materials are of high quality.\"},{\"question\":\"Shape metals and other physical objects using heat, pressure or chemicals. Use specialized machines to work with metal or print text or images.\"},{\"question\":\"Manage the purchase and sale of commercial products and services to customers. Take orders, determine prices and meet customers\\' needs.\"},{\"question\":\"Create and edit visual and audio content for video, print and online media platforms. Use cameras, software or other tools to create graphics, stories, and layouts.\"},{\"question\":\"Track and report business operations such as workloads, budgets, schedules or services. Collect information, monitor work quality and track the use of resources.\"},{\"question\":\"Evaluate product designs and technical services to check their usefulness and compliance with rules. Review data and reports to provide feedback.\"},{\"question\":\"Monitor the quality and safety of food and agriculture products and supplies. Make sure food products are made and processed properly.\"},{\"question\":\"Maintain the condition of work areas, property and public spaces. Keep buildings and spaces in good working order and free from damage. \"},{\"question\":\"Control the flow and pressure of gas, water, air or oil in energy or utility systems. Measure levels and change settings on valves, pumps or storage tanks.\"},{\"question\":\"Teach and train others science, math or workplace topics. Engage students, provide feedback and track progress.\"},{\"question\":\"Direct an organization\\'s functions and coordinate the activities of the workforce. Determine work plans, manage resources, and control budgets.\"},{\"question\":\"Handle the shipment and storage of supplies for customers, stores or warehouses. Arrange, move, pack and label items.\"},{\"question\":\"Prevent fires, accidents or injuries at work sites by assessing safety hazards. Create safety rules, conduct checks and inspections and investigate accidents.\"},{\"question\":\"Design methods to efficiently and securely store and transport critical supplies and resources. Make sure polices are followed to protect the public and prevent waste.\"},{\"question\":\"Map the features, dimensions and contours of land or objects using measurement instruments. Use tools like cameras or GPS devices to take measurements. \"},{\"question\":\"Process bills, payments, invoices and credit services. Check the status of accounts and statements and verify that information is correct.\"},{\"question\":\"Design hiring and training programs to help people find and maintain jobs. Provide guidance to job seekers and employees.\"},{\"question\":\"Select the right materials for use in laboratories, factories or work sites. Handle special chemicals or raw materials to make sure they are used or disposed of correctly.\"},{\"question\":\"Identify and fix problems with the parts and functioning of engines and mechanical systems. Make adjustments and ensure systems work as intended.\"},{\"question\":\"Provide services or treatment to help clients with physical or emotional rehabilitation. Create personalized treatment plans and connect people with health resources.\"},{\"question\":\"Collect, analyze and report data to inform decisions, conduct research, or discover trends. Check data quality, interpret results and explain findings.\"},{\"question\":\"Provide information about services, rules and trends to businesses and the public. Issue guidance and answer questions to help others understand policies.\"},{\"question\":\"Protect the public from hazardous materials, crime or controlled substances. Enforce laws and prevent harm from dangerous materials or activities.\"}]}');\n\n//# sourceURL=webpack://opm-career-explorer-mockup/./src/data/questions-v3.json?");

/***/ }),

/***/ "./src/data/sample-series.json":
/*!*************************************!*\
  !*** ./src/data/sample-series.json ***!
  \*************************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('{\"Series\":[{\"CodeName\":\"Food service worker (series 7408)\",\"Code\":\"7408\",\"JobTitles\":[\"Food service worker\",\"Barista\",\"Child and youth program food service worker\",\"Food service supervisor\"],\"Description\":\"In this job series, you will serve food and drinks and prepare simple meals at government buildings and locations. You may help set tables, work at food counters, wash dishes and cutlery or move food and kitchen equipment. Food service workers also serve hospital patients and record or track patient diet and other information, as well as cleaning floors, walls and ceilings.\",\"Match\":100},{\"CodeName\":\"Electrician (series 2805)\",\"Code\":\"2805\",\"JobTitles\":[\"Electrician\",\"Apprentice\",\"Electrical worker supervisor\",\"Production shop planner\"],\"Description\":\"You will install, maintain, troubleshoot and repair electrical wiring systems, fixtures, controls and equipment in industrial, institutional, office or residential buildings or on ships. Working as an electrician requires that you understand and apply electrical principles, materials and safety standards.\",\"Match\":100},{\"CodeName\":\"Education services (series 1740)\",\"Code\":\"1740\",\"JobTitles\":[\"Guidance counselor\",\"Education services specialist\",\"Psychologist\",\"Social worker\"],\"Description\":\"You will manage, promote, conduct or evaluate programs that help people create career plans or develop their skills. A career in education services requires that you understand educational theories and practices for high school, adult or continuing education students. You may also help students set educational and career goals.\",\"Match\":90},{\"CodeName\":\"Pharmacist (series 0660)\",\"Code\":\"0660\",\"JobTitles\":[\"Pharmacist\",\"Clinical pharmacist\",\"Pharmacy supervisor\",\"Program manager\"],\"Description\":\"You will prepare and dispense medications prescribed by doctors and dentists, research new drugs and compounding techniques, advise patients on medication use and manage pharmacy programs. As a pharmacist, you may also evaluate new drug proposals and monitor the safety and effectiveness of existing drugs on the market.\",\"Match\":90},{\"CodeName\":\"Language specialist (series 1040)\",\"Code\":\"1040\",\"JobTitles\":[\"Translator\",\"Interpreter\",\"Linguist\",\"Language analyst or specialist\",\"Foreign service regional English language office\"],\"Description\":\"In this job series, you will translate between a foreign language and English in writing or verbally. You may also administer, supervise and perform translations.\",\"Match\":80},{\"CodeName\":\"Public utilities specialist (series 1130)\",\"Code\":\"1130\",\"JobTitles\":[\"Public utilities specialist\",\"Supervisory public utilities specialist\",\"Public utilities specialist (metering)\",\"Public utilities specialist (energy efficiency)\"],\"Description\":\"You will analyze utility rate schedules, investigate and analyze public utilities\\' financial structure, and prepare information for regulatory organizations. Public utilities specialists may also help the government buy or sell utility resources and services. In this industry, you should understand public utilities like electric and gas power, water, steam or sewage disposal.\",\"Match\":80},{\"CodeName\":\"Air traffic control (series 2152)\",\"Code\":\"2152\",\"JobTitles\":[\"Air traffic control specialist\",\"Supervisory air traffic control specialist\",\"Traffic management coordinator\",\"Support specialist\",\"Flight data communications specialist\",\"Operations supervisor\"],\"Description\":\"In air traffic control, you will direct and control air traffic to make sure planes move safely and efficiently in airports and on route. You will provide pilots before and during flights with necessary information. You may also create and manage air traffic control programs. In this field, you should understand aircraft separation standards and control techniques and handle stressful situations well. This job series requires extensive knowledge of air traffic rules and regulations.\",\"Match\":70},{\"CodeName\":\"Program management (series 0340)\",\"Code\":\"0340\",\"JobTitles\":[\"Program manager\",\"Supervisory program manager\",\"Federal security director\",\"Programs director\",\"Deputy director\"],\"Description\":\"You will manage or assist in managing programs and supporting service organizations. You should have strong management and executive skills but not expertise in a specific subject area. If a position does require expertise, it will be classified in another job series.\",\"Match\":70},{\"CodeName\":\"Marine machinery mechanic (series 5334)\",\"Code\":\"5334\",\"JobTitles\":[\"Marine machinery mechanic\",\"Marine machinery mechanic leader or supervisor\",\"Apprentice\",\"Marine machinery repairer\",\"Production shop planner\"],\"Description\":\"You will repair and maintain marine machinery, equipment and systems like propulsion machinery, propellers, rudders, cargo handling machinery, lifeboat davits, anchor handling gear and missile tube equipment. This job series requires practical knowledge of the mechanical, hydraulic and pneumatic systems and components of submarines, ships and other floating craft. Marine mechanic work requires understanding how the machinery and equipment operate and function and the unique environmental conditions on marine vessels, like the lack of space between bulkheads and where equipment is located.\",\"Match\":0},{\"CodeName\":\"Public health program specialist (series 0685)\",\"Code\":\"0685\",\"JobTitles\":[\"Public health advisor\",\"Public health analyst\",\"Supervisory public health advisor\",\"Director\"],\"Description\":\"You will plan, manage and evaluate public health activities that may be partly financed by federal funds. In this job series, you may conduct studies and other strategic work that focuses on developing, organization and administrating public health programs. You also might assist state and local governments, as well as public, nonprofit and private organizations and businesses.\",\"Match\":0},{\"CodeName\":\"Consumer safety (series 0696)\",\"Code\":\"0696\",\"JobTitles\":[\"Consumer safety officer\",\"Supervisory consumer safety officer\",\"Public health training coordinator\",\"Deputy director\",\"Food technician\"],\"Description\":\"You will enforce laws and regulations that protect people from harmful or dangerous products. In consumer safety, you will identify and evaluate hazardous substances, manufacturing and production practices, quality control systems, laboratory analyses and clinical investigation programs.\",\"Match\":0},{\"CodeName\":\"Store working (series 6914)\",\"Code\":\"6914\",\"JobTitles\":[\"Store worker\",\"Store worker leader\",\"Forklift operator\",\"Motor vehicle operator\"],\"Description\":\"You will work in a store, helping customers find and buy items they need. You should understand basic math, as well as how to track stock and match items on shelves to lists. You will learn what items your store carries and display them in a way that makes sense for customers. You should also know how to identify items for pricing and quality based on the type, kind or variety.\",\"Match\":0},{\"CodeName\":\"Financial series analysis (series 1160)\",\"Code\":\"1160\",\"JobTitles\":[\"Financial analyst\",\"Supervisory financial analyst\",\"Senior financial analyst\",\"Loan review analyst\",\"Capital markets policy analyst\"],\"Description\":\"You will direct or do work that requires knowing and applying finance theory and principles. You should understand financial and management organization, laws and regulations and economic, accounting and legal principles. In this job series, you may work in a wide range of financial operations for government agencies.\",\"Match\":0},{\"CodeName\":\"Meteorology (series 1340)\",\"Code\":\"1340\",\"JobTitles\":[\"Meteorologist\",\"Lead meteorologist\",\"Supervisory meteorologist\"],\"Description\":\"You will work in meteorology, studying the earth\\'s atmosphere and processes. In this job series, you will research and analyze atmospheric conditions and weather patterns, collect and interpret meteorological data and develop new or improved methods and instruments. You need to understand meteorological methods, techniques and theory.\",\"Match\":0},{\"CodeName\":\"Contracting (series 1102)\",\"Code\":\"1102\",\"JobTitles\":[\"Contract specialist\",\"Procurement analyst\",\"Supervisory contract specialist\",\"Acquisitions specialist\",\"Negotiator\"],\"Description\":\"You will help the government buy supplies, services, construction or research and development support. This includes knowing formal advertising and negotiation procedures, evaluating contract prices and managing contracts. You need to know the laws, regulations and methods used in government contracting, business and industry practices, sources of supply, cost factors and requirements.\",\"Match\":0}]}');\n\n//# sourceURL=webpack://opm-career-explorer-mockup/./src/data/sample-series.json?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;